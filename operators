# operators in python 

#  operators are used to  operate on values 


#  operators  are generally a symbol  which  is ;used 
#   to manipulate  any  mathmetical  or logical  expressions.


#   a+b [where + is a operator &  a,b  both are  called operands]

#   according to basis of operands , operators are  3 types :-

#   1: unary  operator :-single operands (not operator )
#   2: binary  operator :-double  operands +.-,*,/,% etc
#   3: ternary operator :-triple  operands (conditional operartor) 

#   gernerally  in python  operator are different types :-
#   1. arithmetical operator 
#   2. assingment operators 
#   3. comparision operator 
#   4. logical  operator 
#   5 membership operators
#   6. identify operator
#   7. walrus operator[python 3.8 version]
#   8.bitwise operator 

#   2.assingment operator =>
#     it is also called  binary operator .
#     these operator  are mainly  used for to assign  a value  into a variable .
#     these operator  always  works right to left.

#     =,+, -=,*=,/=,%=,**=,//=
  

#   3. comparision operator =>
#   it is also called  binRY   operaror .
#   these  operator are mainly usedd for to check  a conditon  if conditional
#   is true  then return true  and  if condition  is false  then return false .

#   ==, >,>=, <,<=, !=

#   diffrence btw = and ==

#   = is a assingment operator 
#   == is a comparison operator 



# 4. logical operator =>
# it is also called  boolean operator .
# these operator are mainly used to check  the logical  condition
# if condition is true then return true  and if condition is false then return false
# 
# and[binary operator], or[binary operator], not[unary operator]
# and operator  is used to check both condition
# or operator  is used to check any one condition
# not operator  is used to check opposite condition

# example

# a=10
# b=20 
# (a<b and b>a)
# True
# (a>b or b<a)

# True
# (not a>b)
# True
# (not a<b)
# False
# (a>b and b<a)
# False
# (a<b or b<a)
# True

# 5. membership operator =>
#it is a special operator in python
#these operator  always works  with  collection data type
# i.e list, tuple, set, dictionary, string
# its also  returns output as a true or false

# in operator
# not in operator

# example
# a=[1,2,3,4,5]
# 1 in a
# True
# 6 not in a
# True
# 
# string example
# a="hello world"
# "hello" in a
# True

# "hello" not in a
# False

#str1="hello"
# str2="hello world"
# str1 is str2
# False
# str1 is not str2
# True

#difference btw comparision operator and identity operator
# comparision operator is used to check the value of variable
# identity operator is used to check the memory location of variable

# 6. identity operator =>
# it is also called  special operator
# these operator are used to check the memory location of variable
# it is also called  special operator
# example
# a=10
# b=10
# a is b
# True
# a is not b
# False

# 7. walrus operator =>
# its name is walrus operator on the basis of the animal walrus

#this operator is used to assign a value to a variable and return the value at the same time
# this operator is used in python 3.8 version
# this operator is also called  assignment expression operator
# syntax
# variable_name := expression
# example
# a=10
# b=20
# c=a+b
# print(c)
# output
# 30


#bitwise operator
 it  is also  a special operator  in python .
 it is used  for  shifting  of bit  levels.

 &[bitwise and operator ]
 | [bitwise or operator ]
 ^ [ bitwise  X or operator]
 ~[bitwise not  operator ]
 << [left shift operatr]
 >>[riwght shift operator]


 logic and gate  := [truth table ]
 x  y  result
 0  0  0
 1  0  0
 0  1  0
 1  1  1
 

logic or gate :=[truth table]


x  y  result
 0  0  0
 1  0  1
 0  1  1
 1  1  1


 logic  X or gate 
 x  y  result
 0  0  0
 1  0  1
 0  1  1
 1  1  0


 logic  not  gate 
 input  result
  0     1
  1     0



  # Example of bitwise operators in Python

  # Bitwise AND
  a = 5  # Binary: 0101
  b = 3  # Binary: 0011
  result = a & b  # Binary: 0001
  # Output: 1

  # Bitwise OR
  result = a | b  # Binary: 0111
  # Output: 7

  # Bitwise XOR
  result = a ^ b  # Binary: 0110
  # Output: 6

  # Bitwise NOT
  result = ~a  # Binary: -(0101 + 1) = -0110
  # Output: -6

  # Left Shift
  result = a << 1  # Binary: 1010
  # Output: 10

  # Right Shift
  result = a >> 1  # Binary: 0010
  # Output: 2


preference of operator
Bodmas rule
# Preference of operators in Python follows the BODMAS rule:
# B - Brackets
# O - Orders (Exponents, Roots, etc.)
# D - Division
# M - Multiplication
# A - Addition
# S - Subtraction

# Example demonstrating operator precedence:
a = 10
b = 5
c = 2

# Expression: a + b * c
# Multiplication (*) has higher precedence than Addition (+)
result = a + b * c  # Equivalent to a + (b * c)
# Output: 20

# Expression: (a + b) * c
# Brackets () have the highest precedence
result = (a + b) * c
# Output: 30

# Expression: a ** b / c
# Exponentiation (**) has higher precedence than Division (/)
result = a ** b / c  # Equivalent to (a ** b) / c
# Output: 50000.0

# Expression: a + b - c
# Addition (+) and Subtraction (-) have the same precedence, evaluated left to right
result = a + b - c  # Equivalent to (a + b) - c
# Output: 13

























  















  
